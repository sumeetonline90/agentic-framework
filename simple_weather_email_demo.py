#!/usr/bin/env python3
"""
Simple Weather-to-Email Demo

This demo shows how two agents can work together:
1. Weather Agent: Gets weather information for Mumbai (simulated)
2. Email Agent: Sends the weather details via email
"""

import asyncio
import logging
from datetime import datetime
from dotenv import load_dotenv

# Load environment variables
load_dotenv('email_settings.env')

from agents.weather_agent import WeatherAgent
from agents.email_agent import EmailAgent
from core.message_bus import Message
from core.context_manager import ContextScope


class SimpleWeatherEmailDemo:
    """Simple demo for Weather Agent + Email Agent automation."""
    
    def __init__(self):
        self.logger = logging.getLogger("simple_weather_email_demo")
        
        # Demo configuration
        self.target_city = "Mumbai"
        self.target_email = "sumeetonline90@gmail.com"
        
        # Load email configuration
        import os
        self.smtp_config = {
            "host": os.getenv("SMTP_SERVER", "smtp.gmail.com"),
            "port": int(os.getenv("SMTP_PORT", "587")),
            "username": os.getenv("EMAIL_USERNAME"),
            "password": os.getenv("EMAIL_PASSWORD"),
            "use_tls": os.getenv("SMTP_USE_TLS", "True").lower() == "true",
            "use_ssl": os.getenv("SMTP_USE_SSL", "False").lower() == "true"
        }
        
    async def setup_logging(self):
        """Setup logging for the demo."""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        self.logger.info("Simple Weather-Email Demo logging setup complete")
    
    async def get_mumbai_weather(self) -> dict:
        """Get simulated weather data for Mumbai."""
        self.logger.info(f"Getting weather data for {self.target_city}...")
        
        # Simulated weather data for Mumbai
        weather_data = {
            "location": "Mumbai, India",
            "temperature": 28,
            "condition": "Partly Cloudy",
            "humidity": 65,
            "wind_speed": 12,
            "wind_direction": "SW",
            "pressure": 1013,
            "visibility": 10,
            "feels_like": 30,
            "uv_index": 6
        }
        
        self.logger.info(f"✅ Weather data retrieved for {self.target_city}")
        return weather_data
    
    async def get_weather_forecast(self) -> list:
        """Get simulated 3-day weather forecast for Mumbai."""
        self.logger.info(f"Getting 3-day forecast for {self.target_city}...")
        
        # Simulated forecast data
        forecast_data = [
            {
                "date": "2025-09-09",
                "high_temp": 30,
                "low_temp": 22,
                "condition": "Partly Cloudy",
                "humidity": 70,
                "wind_speed": 15,
                "precipitation_chance": 20
            },
            {
                "date": "2025-09-10",
                "high_temp": 32,
                "low_temp": 24,
                "condition": "Sunny",
                "humidity": 60,
                "wind_speed": 10,
                "precipitation_chance": 10
            },
            {
                "date": "2025-09-11",
                "high_temp": 29,
                "low_temp": 23,
                "condition": "Light Rain",
                "humidity": 80,
                "wind_speed": 18,
                "precipitation_chance": 60
            }
        ]
        
        self.logger.info(f"✅ Forecast data retrieved for {self.target_city}")
        return forecast_data
    
    def compose_weather_email(self, weather_data: dict, forecast_data: list) -> str:
        """Compose the weather email content."""
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        email_content = f"""
🌤️ WEATHER REPORT FOR MUMBAI
Generated on: {current_time}

📍 CURRENT WEATHER:
==================
Location: {weather_data['location']}
Temperature: {weather_data['temperature']}°C (Feels like {weather_data['feels_like']}°C)
Condition: {weather_data['condition']}
Humidity: {weather_data['humidity']}%
Wind Speed: {weather_data['wind_speed']} km/h
Wind Direction: {weather_data['wind_direction']}
Pressure: {weather_data['pressure']} hPa
Visibility: {weather_data['visibility']} km
UV Index: {weather_data['uv_index']}

📅 3-DAY FORECAST:
==================
"""
        
        for day in forecast_data:
            email_content += f"""
📅 {day['date']}
   High: {day['high_temp']}°C | Low: {day['low_temp']}°C
   Condition: {day['condition']}
   Humidity: {day['humidity']}%
   Wind: {day['wind_speed']} km/h
   Precipitation Chance: {day['precipitation_chance']}%
   {'─' * 40}
"""
        
        email_content += f"""

🤖 This weather report was automatically generated by the Agentic Framework.
📧 For more detailed weather information, please visit your local weather service.

Best regards,
Weather Bot 🌤️
"""
        
        return email_content
    
    async def run_automation(self):
        """Run the complete weather-to-email automation."""
        try:
            self.logger.info("🌤️ Starting Simple Weather-to-Email Automation")
            self.logger.info("=" * 60)
            
            # Setup
            await self.setup_logging()
            
            # Create and start agents
            self.logger.info("Initializing Weather and Email agents...")
            
            weather_agent = WeatherAgent("weather_agent", {})
            email_agent = EmailAgent("email_agent", self.smtp_config)
            
            await weather_agent.start()
            await email_agent.start()
            
            # Set SMTP config directly on email agent
            email_agent.smtp_config = self.smtp_config
            
            self.logger.info("✅ Weather and Email agents initialized successfully!")
            
            # Wait for agents to fully initialize
            await asyncio.sleep(2)
            
            # Get weather data
            weather_data = await self.get_mumbai_weather()
            if not weather_data:
                self.logger.error("❌ Cannot proceed without weather data")
                return False
            
            # Get forecast data
            forecast_data = await self.get_weather_forecast()
            
            # Compose email content
            email_content = self.compose_weather_email(weather_data, forecast_data)
            self.logger.info("📧 Email content composed")
            
            # Create email data
            email_data = {
                "sender": self.smtp_config["username"],
                "recipients": [self.target_email],
                "subject": f"🌤️ Weather Report for Mumbai - {datetime.now().strftime('%Y-%m-%d')}",
                "body": email_content,
                "priority": "normal"
            }
            
            # Compose email
            import uuid
            compose_message = Message(
                id=str(uuid.uuid4()),
                sender="demo",
                recipient="email_agent",
                type="email_request",
                data={"action": "compose_email", "email_data": email_data}
            )
            
            self.logger.info("📝 Composing weather email...")
            compose_response = await email_agent.process_message(compose_message)
            
            if compose_response and compose_response.data.get("action") == "email_composed":
                email_id = compose_response.data.get("email_id")
                self.logger.info(f"✅ Email composed with ID: {email_id}")
                
                # Send the email
                send_message = Message(
                    id=str(uuid.uuid4()),
                    sender="demo",
                    recipient="email_agent",
                    type="email_request",
                    data={"action": "send_email", "email_id": email_id}
                )
                
                self.logger.info("📤 Sending weather email...")
                send_response = await email_agent.process_message(send_message)
                
                if send_response and send_response.data.get("action") == "email_sent":
                    self.logger.info("✅ Weather email sent successfully!")
                    self.logger.info(f"📧 Weather report sent to {self.target_email}")
                    return True
                else:
                    self.logger.error(f"❌ Failed to send email: {send_response.data.get('error', 'Unknown error') if send_response else 'No response'}")
                    return False
            else:
                self.logger.error(f"❌ Failed to compose email: {compose_response.data.get('error', 'Unknown error') if compose_response else 'No response'}")
                return False
                
        except Exception as e:
            self.logger.error(f"❌ Automation failed with error: {e}")
            import traceback
            traceback.print_exc()
            return False
        finally:
            # Cleanup
            self.logger.info("🧹 Cleaning up...")
            try:
                await weather_agent.stop()
                await email_agent.stop()
            except:
                pass
            self.logger.info("✅ Cleanup complete")


async def main():
    """Main function to run the demo."""
    print("🌤️ Simple Weather-to-Email Automation Demo")
    print("This demo will get Mumbai's weather and email it to you.")
    print("Press Ctrl+C to stop the demo at any time.\n")
    
    demo = SimpleWeatherEmailDemo()
    success = await demo.run_automation()
    
    if success:
        print("\n🎉 Demo completed successfully!")
        print("Check your email for the Mumbai weather report!")
    else:
        print("\n❌ Demo failed. Check the log output for details.")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n👋 Demo stopped by user. Goodbye!")
    except Exception as e:
        print(f"\n❌ Demo failed: {e}")
